// Generated by CoffeeScript 1.6.3
var Builder, argv, builder, check_config, config, error, exists, fs, get_config_content, get_config_path, load_json, load_yaml, opts, path;

path = require("path");

fs = require("fs");

Builder = require("./").Builder;

exists = function(filepath) {
  var stats;
  if (!fs.existsSync(filepath)) {
    return;
  }
  stats = fs.statSync(filepath);
  if (!stats.isFile()) {
    return;
  }
  return filepath;
};

load_json = function(filepath) {
  var source;
  if (filepath == null) {
    return;
  }
  source = fs.readFileSync(filepath);
  return JSON.parse(source);
};

load_yaml = function(filepath) {
  var source, yaml;
  yaml = require('js-yaml');
  if (filepath == null) {
    return;
  }
  source = fs.readFileSync(filepath, {
    encoding: "utf8"
  });
  return yaml.safeLoad(source);
};

get_config_path = function(arg) {
  var cwd, _ref, _ref1;
  cwd = process.cwd();
  if (arg != null) {
    return exists(path.resolve(cwd, arg));
  }
  return (_ref = (_ref1 = exists(path.join(cwd, "spa.json"))) != null ? _ref1 : exists(path.join(cwd, "spa.yaml"))) != null ? _ref : exists(path.join(cwd, "spa.yml"));
};

get_config_content = function(filepath) {
  switch (path.extname(filepath)) {
    case ".yaml":
    case ".yml":
      return load_yaml(filepath);
    case ".json":
      return load_json(filepath);
  }
};

check_config = function(config) {
  if (config.root == null) {
    config.root = config;
  }
  if (config.root == null) {
    config.root = ".";
  }
  config.root = path.resolve(process.cwd(), config.root);
  return config;
};

opts = require('optimist').usage('Usage: $0 <build-config-file>').options({
  config: {
    describe: "path to build config file"
  },
  help: {
    boolean: true
  },
  debug: {
    boolean: true
  }
});

argv = opts.parse(process.argv);

if (argv.help) {
  console.log(opts.help());
  process.exit();
}

config = check_config(get_config_content(get_config_path(argv.config)));

builder = new Builder(config);

try {
  builder.build();
} catch (_error) {
  error = _error;
  console.log(error.toString());
}
