// Generated by CoffeeScript 1.6.3
var Builder, builder, crypto, detective, fs, minimatch, path, walk, _;

fs = require('fs');

walk = require('fs-walk');

path = require('path');

detective = require('detective');

minimatch = require('minimatch');

crypto = require('crypto');

_ = require('underscore');

_.string = require('underscore.string');

_.mixin(_.string.exports());

Builder = (function() {
  function Builder(options) {
    this.root = options.root;
    this.extensions = options.extensions;
    this.excludes = options.excludes;
    this.paths = options.paths;
    this._clear();
  }

  Builder.prototype.filter = function(filepath) {
    if (!minimatch(filepath, this.extensions, {
      matchBase: true
    })) {
      return false;
    }
    return !_(this.excludes).any(function(pattern) {
      return minimatch(filepath, pattern, {
        matchBase: true
      });
    });
  };

  Builder.prototype._clear = function() {
    this._modules = [];
    this._by_path = {};
    return this._by_id = {};
  };

  Builder.prototype._enlist = function(root) {
    var _this = this;
    walk.filesSync(root, function(basedir, filename, stat) {
      var filepath, module;
      filepath = path.join(basedir, filename);
      if (!_this.filter(filepath)) {
        return;
      }
      module = {
        path: filepath
      };
      _this._by_path[filepath] = module;
      return _this._modules.push(module);
    });
  };

  Builder.prototype._set_ids = function() {
    var ext, id, module, root, _i, _len, _ref;
    _ref = this._modules;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      module = _ref[_i];
      ext = path.extname(module.path);
      root = path.dirname(module.path);
      id = path.basename(module.path, ext);
      if (id === "index") {
        id = path.basename(root);
        root = path.dirname(root);
      }
      while (id in this._by_id) {
        id = path.basename(root) + "|" + id;
        root = path.dirname(root);
      }
      this._by_id[id] = module;
      module.id = id;
    }
  };

  Builder.prototype._resolve_to_file = function(filepath) {
    var stats;
    if (fs.existsSync(filepath)) {
      stats = fs.statSync(filepath);
      if (stats.isFile()) {
        return filepath;
      }
    }
  };

  Builder.prototype._resolve_to_directory = function(dirpath) {
    var stats;
    if (fs.existsSync(dirpath)) {
      stats = fs.statSync(dirpath);
      if (stats.isDirectory()) {
        return this._resolve_to_file(path.join(dirpath, "index.js"));
      }
    }
  };

  Builder.prototype._resolve = function(module, dep) {
    var alias, basedir, prefix, _ref, _ref1, _ref2;
    _ref = this.paths;
    for (alias in _ref) {
      prefix = _ref[alias];
      if (_(dep).startsWith(alias)) {
        dep = dep.replace(alias, prefix);
        break;
      }
    }
    if (_(dep).startsWith("/")) {
      dep = path.join(this.root, dep);
    } else if (_(dep).startsWith("./") || _(dep).startsWith("../")) {
      basedir = path.dirname(module.path);
      dep = path.resolve(basedir, dep);
    }
    return (_ref1 = (_ref2 = this._resolve_to_file(dep)) != null ? _ref2 : this._resolve_to_file(dep + ".js")) != null ? _ref1 : this._resolve_to_directory(dep);
  };

  Builder.prototype._analyze = function(module) {
    var dep, resolved, source, _i, _len, _ref, _results;
    source = fs.readFileSync(module.path);
    module.md5 = crypto.createHash('md5').update(source).digest('hex');
    module.size = source.length;
    module.deps_paths = {};
    _ref = detective(source);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dep = _ref[_i];
      resolved = this._resolve(module, dep);
      _results.push(module.deps_paths[dep] = resolved);
    }
    return _results;
  };

  Builder.prototype._link = function() {
    var dep, module, resolved, _i, _len, _ref, _results;
    _ref = this._modules;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      module = _ref[_i];
      module.deps_ids = {};
      _results.push((function() {
        var _ref1, _results1;
        _ref1 = module.deps_paths;
        _results1 = [];
        for (dep in _ref1) {
          resolved = _ref1[dep];
          if (this._by_path[resolved] != null) {
            _results1.push(module.deps_ids[dep] = this._by_path[resolved].id);
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Builder.prototype.build = function() {
    var module, _i, _len, _ref;
    this._enlist(this.root);
    this._set_ids();
    _ref = this._modules;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      module = _ref[_i];
      this._analyze(module);
    }
    this._link();
  };

  return Builder;

})();

module.exports = Builder;

builder = new Builder({
  root: path.resolve(process.cwd(), "./tests/building/"),
  extensions: "*.js",
  excludes: ["**/node_modules/**"],
  paths: {
    "a1": "/module1/a"
  }
});

builder.build();

console.log(builder._modules);
