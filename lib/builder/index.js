// Generated by CoffeeScript 1.6.3
var Builder, builder, crypto, detective, fs, minimatch, path, resolve, walk, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

walk = require('fs-walk');

path = require('path');

detective = require('detective');

resolve = require('resolve');

minimatch = require('minimatch');

crypto = require('crypto');

_ = require('underscore');

_.string = require('underscore.string');

_.mixin(_.string.exports());

Builder = (function() {
  function Builder(options) {
    this.root = options.root;
    this.extensions = options.extensions;
    this.excludes = options.excludes;
    this._clear();
  }

  Builder.prototype.filter = function(filepath) {
    if (!minimatch(filepath, this.extensions, {
      matchBase: true
    })) {
      return false;
    }
    return !_(this.excludes).any(function(pattern) {
      return minimatch(filepath, pattern, {
        matchBase: true
      });
    });
  };

  Builder.prototype._clear = function() {
    this._by_path = {};
    this._modules = {};
    return this._by_id = {};
  };

  Builder.prototype._enlist = function(root) {
    var _this = this;
    return walk.filesSync(root, function(basedir, filename, stat) {
      var filepath, module;
      filepath = path.join(basedir, filename);
      if (!_this.filter(filepath)) {
        return;
      }
      module = {
        path: filepath
      };
      _this._by_path[filepath] = module;
      return _this._modules.push(module);
    });
  };

  Builder.prototype._set_ids = function() {
    var ext, id, module, root, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = modules.length; _i < _len; _i++) {
      module = modules[_i];
      ext = path.extname(module.path);
      root = path.dirname(module.path);
      id = path.basename(module.path, ext);
      if (id === "index") {
        id = path.basename(root);
        root = path.dirname(root);
      }
      while (__indexOf.call(ids, id) >= 0) {
        id = path.basename(root) + "|" + id;
        root = path.dirname(root);
      }
      this._by_id[id] = module;
      _results.push(module.id = id);
    }
    return _results;
  };

  Builder.prototype._analyze = function(module) {
    var dep, resolved, source, _i, _len, _ref, _results;
    source = fs.readFileSync(filepath);
    module.md5 = crypto.createHash('md5').update(source).digest('hex');
    module.size = source.length;
    module.local = [];
    module.core = [];
    module.external = [];
    module.deps = [];
    _ref = detective(source);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dep = _ref[_i];
      try {
        resolved = resolve.sync(dep, {
          basedir: basedir
        });
      } catch (_error) {
        continue;
      }
      if (resolve.isCore(resolved)) {
        _results.push(module.core.push(resolved));
      } else if (__indexOf.call(this.by_path, resolved) >= 0) {
        module.local.push(resolved);
        _results.push(module.deps.push(this.by_path[resolved].id));
      } else {
        _results.push(module.external.push(resolved));
      }
    }
    return _results;
  };

  Builder.prototype.build = function() {
    var module, _i, _len, _ref, _results;
    this._enlist(this.root);
    this._set_ids();
    _ref = this._modules;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      module = _ref[_i];
      _results.push(this._analyze(module));
    }
    return _results;
  };

  return Builder;

})();

module.exports = Builder;

builder = new Builder({
  root: process.cwd(),
  extensions: "*.js",
  excludes: ["**/node_modules/**"]
});

console.log(builder.build());
