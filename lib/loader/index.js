// Generated by CoffeeScript 1.6.3
var AMDEvaluator, AbstractMethodError, BasicEvaluator, CJSEvaluator, ChangesInWindowError, Loader, NoSourceError, PollutionEvaluator, Storage, UndeclaredRequireError, XHR, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AbstractMethodError = (function(_super) {
  __extends(AbstractMethodError, _super);

  function AbstractMethodError() {
    this.name = this.constructor.name;
    this.message = "Calling abstract method detected.";
  }

  return AbstractMethodError;

})(Error);

UndeclaredRequireError = (function(_super) {
  __extends(UndeclaredRequireError, _super);

  function UndeclaredRequireError(self_name, require_name) {
    this.self_name = self_name;
    this.require_name = require_name;
    this.name = this.constructor.name;
    this.message = "Found unreserved attempt to require of `" + this.require_name + "` inside `" + this.self_name + "`";
  }

  return UndeclaredRequireError;

})(Error);

ChangesInWindowError = (function(_super) {
  __extends(ChangesInWindowError, _super);

  function ChangesInWindowError(self_name, props) {
    this.self_name = self_name;
    this.props = props;
    this.name = this.constructor.name;
    this.message = "During `" + this.self_name + "` loading window object was polluted with: " + props;
  }

  return ChangesInWindowError;

})(Error);

NoSourceError = (function(_super) {
  __extends(NoSourceError, _super);

  function NoSourceError(module_md5, module_url) {
    this.module_md5 = module_md5;
    this.module_url = module_url;
    this.name = this.constructor.name;
    this.message = "Module source with checksum of `" + this.module_md5 + "` was not found in localStorage. Probably it was not loaded from " + module_url + ".";
  }

  return NoSourceError;

})(Error);

XHR = function() {
  try {
    return new XMLHttpRequest();
  } catch (_error) {

  }
  try {
    return new ActiveXObject("Msxml3.XMLHTTP");
  } catch (_error) {

  }
  try {
    return new ActiveXObject("Msxml2.XMLHTTP.6.0");
  } catch (_error) {

  }
  try {
    return new ActiveXObject("Msxml2.XMLHTTP.3.0");
  } catch (_error) {

  }
  try {
    return new ActiveXObject("Msxml2.XMLHTTP");
  } catch (_error) {

  }
  try {
    return new ActiveXObject("Microsoft.XMLHTTP");
  } catch (_error) {

  }
  return null;
};

BasicEvaluator = (function() {
  function BasicEvaluator(options) {
    this.id = options.id;
    this.source = options.source;
    this.deps = options.dependencies;
    this["this"] = {};
    this.window = this.get_window();
    this.errors = [];
  }

  BasicEvaluator.prototype.render = function() {
    throw new AbstractMethodError();
  };

  BasicEvaluator.prototype.run = function() {
    var error, func, result;
    func = new Function(this.render());
    try {
      result = func.call(this);
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    try {
      this._check(result);
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    if (this.errors.length > 0) {
      return null;
    }
    return this._make();
  };

  BasicEvaluator.prototype.get_window = function() {
    return {
      __proto__: window
    };
  };

  BasicEvaluator.prototype.get_require = function() {
    throw new AbstractMethodError();
  };

  BasicEvaluator.prototype._fail = function(reason) {
    this.errors.push(reason);
    throw reason;
  };

  BasicEvaluator.prototype._check = function(result) {
    throw new AbstractMethodError();
  };

  BasicEvaluator.prototype._make = function() {
    throw new AbstractMethodError();
  };

  return BasicEvaluator;

})();

CJSEvaluator = (function(_super) {
  __extends(CJSEvaluator, _super);

  function CJSEvaluator(options) {
    CJSEvaluator.__super__.constructor.call(this, options);
    this.module = {};
    this.exports = {};
    this.module.exports = this.exports;
    this.require = this.get_require();
  }

  CJSEvaluator.prototype.render = function() {
    return "return (function(module, exports, require, window) { \n    " + this.source + "; \n}).call(this.this, this.module, this.exports, this.require, this.window);";
  };

  CJSEvaluator.prototype.get_require = function() {
    var require;
    require = function(name) {
      var value;
      value = this.deps[name];
      if (value == null) {
        this._fail(new UndeclaredRequireError(this.id, name));
      }
      return value;
    };
    return require.bind(this);
  };

  CJSEvaluator.prototype._check = function(result) {};

  CJSEvaluator.prototype._make = function() {
    return this.module.exports;
  };

  return CJSEvaluator;

})(BasicEvaluator);

AMDEvaluator = (function(_super) {
  __extends(AMDEvaluator, _super);

  function AMDEvaluator(options) {
    AMDEvaluator.__super__.constructor.call(this, options);
    this.define = this.get_define();
  }

  AMDEvaluator.prototype.render = function() {
    return "return (function(define, window) { \n    " + this.source + "; \n}).call(this.this, this.define, this.window);";
  };

  AMDEvaluator.prototype.get_define = function() {
    var define;
    define = function(names, func) {
      var deps, name;
      deps = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          _results.push(this.deps[name]);
        }
        return _results;
      }).call(this);
      return this.result = func.apply(this["this"], deps);
    };
    return define.bind(this);
  };

  AMDEvaluator.prototype._check = function(result) {};

  AMDEvaluator.prototype._make = function() {
    return this.result;
  };

  return AMDEvaluator;

})(BasicEvaluator);

PollutionEvaluator = (function(_super) {
  __extends(PollutionEvaluator, _super);

  function PollutionEvaluator() {
    _ref = PollutionEvaluator.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PollutionEvaluator.prototype.render = function() {
    var args, name, names;
    names = ["window"].concat((function() {
      var _results;
      _results = [];
      for (name in this.deps) {
        _results.push(name);
      }
      return _results;
    }).call(this)).join(", ");
    args = ["this.this", "this.window"].concat((function() {
      var _results;
      _results = [];
      for (name in this.deps) {
        _results.push("this.deps[\"" + name + "\"]");
      }
      return _results;
    }).call(this)).join(", ");
    return "return (function(" + names + ") {\n    " + this.source + ";\n}).call(" + args + ");";
  };

  PollutionEvaluator.prototype._check = function(result) {};

  PollutionEvaluator.prototype.get_window = function() {
    var name, result, value, _ref1;
    result = {
      __proto__: PollutionEvaluator.__super__.get_window.call(this)
    };
    _ref1 = this.deps;
    for (name in _ref1) {
      value = _ref1[name];
      result[name] = value;
    }
    return {
      __proto__: result
    };
  };

  PollutionEvaluator.prototype._make = function() {
    var name, result, value, _ref1, _ref2;
    result = {};
    _ref1 = this.window;
    for (name in _ref1) {
      if (!__hasProp.call(_ref1, name)) continue;
      value = _ref1[name];
      result[name] = value;
    }
    _ref2 = this["this"];
    for (name in _ref2) {
      if (!__hasProp.call(_ref2, name)) continue;
      value = _ref2[name];
      result[name] = value;
    }
    return result;
  };

  return PollutionEvaluator;

})(BasicEvaluator);

Storage = (function() {
  function Storage() {}

  Storage.prototype.get = function(name) {
    throw new AbstractMethodError();
  };

  Storage.prototype.set = function(name, value) {
    throw new AbstractMethodError();
  };

  return Storage;

})();

Loader = (function() {
  function Loader(options) {
    this._all_modules = {};
    this._modules_in_update = [];
    this._update_started = false;
  }

  Loader.prototype.get = function(name) {
    return window.localStorage.getItem(name);
  };

  Loader.prototype.set = function(name, value) {
    console.log("setting key", name);
    return window.localStorage.setItem(name, value);
  };

  Loader.prototype.onUpdateFound = function(event) {
    console.log("onUpdateFound", arguments);
    return this.startUpdate();
  };

  Loader.prototype.onUpToDate = function() {
    return console.log("onUpToDate", arguments);
  };

  Loader.prototype.onUpdateFailed = function() {
    return console.log("onUpdateFailed", arguments);
  };

  Loader.prototype.onUpdateCompletted = function(event) {
    return console.log("onUpdateCompletted", arguments);
  };

  Loader.prototype.onModuleBeginDownload = function() {
    return console.log("onModuleBeginDownload", arguments);
  };

  Loader.prototype.onModuleDownloaded = function() {
    return console.log("onModuleDownloaded", arguments);
  };

  Loader.prototype.onModuleDownloadFailed = function() {
    return console.log("onModuleDownloadFailed", arguments);
  };

  Loader.prototype.onModuleDownloadProgress = function() {
    return console.log("onModuleDownloadProgress", arguments);
  };

  Loader.prototype.onTotalDownloadProgress = function() {
    return console.log("onTotalDownloadProgress", arguments);
  };

  Loader.prototype.onApplicationReady = function() {
    return console.log("onApplicationReady", arguments);
  };

  Loader.prototype.onEvaluationError = function() {
    return console.log("onEvaluationError", arguments);
  };

  Loader.prototype.start = function() {
    var alias, dep, deps, error, evaluator, manifest, manifest_source, module, module_source, _i, _len, _ref1;
    manifest_source = this.get("spa::manifest");
    if (manifest_source != null) {
      manifest = JSON.parse(manifest_source);
      for (_i = 0, _len = manifest.length; _i < _len; _i++) {
        module = manifest[_i];
        module_source = this.get("spa:" + module.md5 + ":" + module.url);
        if (module_source == null) {
          this.onEvaluationError(new NoSourceError(module.md5, module.url));
        }
        deps = {};
        _ref1 = module.deps;
        for (alias in _ref1) {
          dep = _ref1[alias];
          deps[alias] = this._all_modules[dep];
        }
        evaluator = new CJSEvaluator({
          id: module.id,
          source: module_source,
          deps: deps
        });
        try {
          this._all_modules[module.id] = evaluator.run();
        } catch (_error) {
          error = _error;
          this.onEvaluationError(error);
        }
      }
      this.onApplicationReady();
      return this.checkUpdate(manifest_source);
    } else {
      return this.checkUpdate();
    }
  };

  Loader.prototype.checkUpdate = function(current) {
    var manifest_request,
      _this = this;
    if (this._update_started) {
      return;
    }
    manifest_request = XHR();
    manifest_request.open("GET", "manifest.json", true);
    manifest_request.overrideMimeType("application/json; charset=utf-8");
    manifest_request.onload = function(event) {
      var next;
      next = event.target.response;
      if (current != null) {
        if (md5(current) === md5(next)) {
          _this.onUpToDate();
          return;
        }
      }
      _this._modules_in_update = JSON.parse(next);
      return _this.onUpdateFound(event);
    };
    manifest_request.onerror = function(event) {
      return _this.onUpdateFailed(event);
    };
    return manifest_request.send();
  };

  Loader.prototype.startUpdate = function() {
    var module, _i, _len, _ref1, _results;
    this._update_started = true;
    _ref1 = this._modules_in_update;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      module = _ref1[_i];
      _results.push(this._updateModule(module));
    }
    return _results;
  };

  Loader.prototype._updateModule = function(module) {
    var key, module_source;
    key = "spa:" + module.md5 + ":" + module.url;
    module_source = this.get(key);
    if (module_source != null) {
      module.content = module_source;
      if (this._checkAllUpdated()) {
        return this.onUpdateCompletted();
      }
    } else {
      return this._downloadModule(module);
    }
  };

  Loader.prototype._downloadModule = function(module) {
    var module_request,
      _this = this;
    this.onModuleBeginDownload(module);
    module_request = XHR();
    module_request.open("GET", module.url, true);
    module_request.onload = function(event) {
      var key, module_source;
      module_source = event.target.response;
      if (md5(module_source) !== module.md5) {
        _this.onModuleDownloadFailed(module, event);
      }
      key = "spa:" + module.md5 + ":" + module.url;
      _this.set(key, event.target.response);
      _this.onModuleDownloaded(event);
      module.content = module_source;
      if (_this._checkAllUpdated()) {
        return _this.onUpdateCompletted();
      }
    };
    module_request.onerror = function(event) {
      return _this.oModuleDownloadFailed(module, event);
    };
    return module_request.send();
  };

  Loader.prototype._checkAllUpdated = function() {
    var module, _i, _len, _ref1;
    _ref1 = this._modules_in_update;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      module = _ref1[_i];
      if (module.content == null) {
        return false;
      }
    }
    return true;
  };

  return Loader;

})();

window.onload = function() {
  var loader;
  loader = new Loader();
  return loader.start();
};
