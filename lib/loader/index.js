// Generated by CoffeeScript 1.6.3
var AMDLoader, AbstractMethodException, BasicLoader, CJSLoader, ChangesInWindowObjectException, Exception, PollutionLoader, UndeclaredRequireException, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Exception = (function() {
  function Exception() {}

  return Exception;

})();

AbstractMethodException = (function(_super) {
  __extends(AbstractMethodException, _super);

  function AbstractMethodException() {
    _ref = AbstractMethodException.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  return AbstractMethodException;

})(Exception);

UndeclaredRequireException = (function(_super) {
  __extends(UndeclaredRequireException, _super);

  function UndeclaredRequireException(self_name, require_name) {
    this.self_name = self_name;
    this.require_name = require_name;
  }

  return UndeclaredRequireException;

})(Exception);

ChangesInWindowObjectException = (function(_super) {
  __extends(ChangesInWindowObjectException, _super);

  function ChangesInWindowObjectException(self_name, props) {
    this.self_name = self_name;
    this.props = props;
  }

  return ChangesInWindowObjectException;

})(Exception);

BasicLoader = (function() {
  function BasicLoader(options) {
    this.id = options.id;
    this.source = options.source;
    this.deps = options.dependencies;
    this["this"] = {};
    this.window = this.get_window();
    this.errors = [];
  }

  BasicLoader.prototype.render = function() {
    throw new AbstractMethodException();
  };

  BasicLoader.prototype.load = function() {
    var error, func, result;
    func = new Function(this.render());
    try {
      result = func.call(this);
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    try {
      this._check(result);
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    if (this.errors.length > 0) {
      return null;
    }
    return this._make();
  };

  BasicLoader.prototype.get_window = function() {
    return {
      __proto__: window
    };
  };

  BasicLoader.prototype.get_require = function() {
    throw new AbstractMethodException();
  };

  BasicLoader.prototype._fail = function(reason) {
    this.errors.push(reason);
    throw reason;
  };

  BasicLoader.prototype._check = function(result) {
    throw new AbstractMethodException();
  };

  BasicLoader.prototype._make = function() {
    throw new AbstractMethodException();
  };

  return BasicLoader;

})();

CJSLoader = (function(_super) {
  __extends(CJSLoader, _super);

  function CJSLoader(options) {
    CJSLoader.__super__.constructor.call(this, options);
    this.module = {};
    this.exports = {};
    this.module.exports = this.exports;
    this.require = this.get_require();
  }

  CJSLoader.prototype.render = function() {
    return "return (function(module, exports, require, window) { \n    " + this.source + "; \n}).call(this.this, this.module, this.exports, this.require, this.window);";
  };

  CJSLoader.prototype.get_require = function() {
    var require;
    require = function(name) {
      var value;
      value = this.deps[name];
      if (value == null) {
        this._fail(new UndeclaredRequireException(this.id, name));
      }
      return value;
    };
    return require.bind(this);
  };

  CJSLoader.prototype._check = function(result) {};

  CJSLoader.prototype._make = function() {
    return this.module.exports;
  };

  return CJSLoader;

})(BasicLoader);

AMDLoader = (function(_super) {
  __extends(AMDLoader, _super);

  function AMDLoader(options) {
    AMDLoader.__super__.constructor.call(this, options);
    this.define = this.get_define();
  }

  AMDLoader.prototype.render = function() {
    return "return (function(define, window) { \n    " + this.source + "; \n}).call(this.this, this.define, this.window);";
  };

  AMDLoader.prototype.get_define = function() {
    var define;
    define = function(names, func) {
      var deps, name;
      deps = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          _results.push(this.deps[name]);
        }
        return _results;
      }).call(this);
      return this.result = func.apply(this["this"], deps);
    };
    return define.bind(this);
  };

  AMDLoader.prototype._check = function(result) {};

  AMDLoader.prototype._make = function() {
    return this.result;
  };

  return AMDLoader;

})(BasicLoader);

PollutionLoader = (function(_super) {
  __extends(PollutionLoader, _super);

  function PollutionLoader() {
    _ref1 = PollutionLoader.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  PollutionLoader.prototype.render = function() {
    var args, name, names;
    names = ["window"].concat((function() {
      var _results;
      _results = [];
      for (name in this.deps) {
        _results.push(name);
      }
      return _results;
    }).call(this)).join(", ");
    args = ["this.this", "this.window"].concat((function() {
      var _results;
      _results = [];
      for (name in this.deps) {
        _results.push("this.deps[\"" + name + "\"]");
      }
      return _results;
    }).call(this)).join(", ");
    return "return (function(" + names + ") {\n    " + this.source + ";\n}).call(" + args + ");";
  };

  PollutionLoader.prototype._check = function(result) {};

  PollutionLoader.prototype.get_window = function() {
    var name, result, value, _ref2;
    result = {
      __proto__: PollutionLoader.__super__.get_window.call(this)
    };
    _ref2 = this.deps;
    for (name in _ref2) {
      value = _ref2[name];
      result[name] = value;
    }
    return {
      __proto__: result
    };
  };

  PollutionLoader.prototype._make = function() {
    var name, result, _i, _j, _len, _len1, _ref2, _ref3;
    result = {};
    _ref2 = Object.keys(this.window);
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      name = _ref2[_i];
      result[name] = this.window[name];
    }
    _ref3 = Object.keys(this["this"]);
    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
      name = _ref3[_j];
      result[name] = this["this"][value];
    }
    return result;
  };

  return PollutionLoader;

})(BasicLoader);

window.onload = function() {
  var env, module;
  env = new CJSLoader({
    name: "user-code-cjs",
    source: document.getElementById("user-code-cjs").text,
    dependencies: {
      test: console
    }
  });
  env.load();
  module = env.load();
  module.greetings();
  env = new AMDLoader({
    name: "user-code-amd",
    source: document.getElementById("user-code-amd").text,
    dependencies: {
      test: console
    }
  });
  module = env.load();
  module.greetings();
  env = new PollutionLoader({
    name: "user-code-pollution",
    source: document.getElementById("user-code-pollution").text,
    dependencies: {
      test: console
    }
  });
  module = env.load();
  return module.greetings();
};
