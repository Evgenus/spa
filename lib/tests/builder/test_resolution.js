// Generated by CoffeeScript 1.6.3
var expect, fs, mock, path, spa, yaml;

fs = require("fs");

mock = require("mock-fs");

spa = require("spa");

yaml = require("js-yaml");

path = require("path");

expect = require('chai').expect;

describe('Building modules with cyclic dependencies', function() {
  before(function() {
    this.old_cwd = process.cwd();
    process.chdir("/");
    return mock(yaml.safeLoad("testimonial: \n    a.js: |\n        var b2 = require(\"/b\");\n    b.js: |\n        var b2 = require(\"/c\");\n    c.js: |\n        var b2 = require(\"/d\");\n    d.js: |\n        var b2 = require(\"/a\");\n    spa.yaml: |\n        root: \"./\""));
  });
  it('should report loop in dependencies', function() {
    var builder, _loop;
    builder = spa.Builder.from_config("/testimonial/spa.yaml");
    _loop = new spa.Loop().prepend("/d.js", "/a").prepend("/c.js", "/d").prepend("/b.js", "/c").prepend("/a.js", "/b");
    return expect(builder.build.bind(builder)).to["throw"](spa.CyclicDependenciesError).to.have.property("loop").that.deep.equals(_loop);
  });
  return after(function() {
    mock.restore();
    return process.chdir(this.old_cwd);
  });
});

describe('Building modules with cyclic dependencies and something else', function() {
  before(function() {
    this.old_cwd = process.cwd();
    process.chdir("/");
    return mock(yaml.safeLoad("testimonial: \n    a.js: |\n        // empty\n    b.js: |\n        var b2 = require(\"/a\");\n    c.js: |\n        var b2 = require(\"/d\");\n        var b2 = require(\"/b\");\n    d.js: |\n        var b2 = require(\"/e\");\n        var b2 = require(\"/f\");\n        var b2 = require(\"/b\");\n    e.js: |\n        var b2 = require(\"/c\");\n        var b2 = require(\"/f\");\n    f.js: |\n        var b2 = require(\"/a\");\n    spa.yaml: |\n        root: \"./\""));
  });
  it('should report only loop', function() {
    var builder, _loop;
    builder = spa.Builder.from_config("/testimonial/spa.yaml");
    _loop = new spa.Loop().prepend("/e.js", "/c").prepend("/d.js", "/e").prepend("/c.js", "/d");
    return expect(builder.build.bind(builder)).to["throw"](spa.CyclicDependenciesError).to.have.property("loop").that.deep.equals(_loop);
  });
  return after(function() {
    mock.restore();
    return process.chdir(this.old_cwd);
  });
});

describe('Building modules with paths rewire', function() {
  before(function() {
    this.old_cwd = process.cwd();
    process.chdir("/");
    return mock(yaml.safeLoad("testimonial: \n    module1:\n        a:\n            c.js: |\n                // empty\n        b.js: |\n            var ac = require(\"./a/c\");\n    module2:\n        e.js: |\n            var a1 = require(\"a1/../b\");\n        d.js: |\n            var a1 = require(\"a1/c\");\n    spa.yaml: |\n        root: \"/testimonial/\"\n        extensions: \n            - .js\n        paths:\n            a1: \"/module1/a\"\n        hosting:\n            \"/(**/*.js)\": \"http://127.0.0.1:8010/$1\"\n        manifest: \"manifest.json\""));
  });
  it('should report loop in dependencies', function() {
    var builder, manifest;
    builder = spa.Builder.from_config("/testimonial/spa.yaml");
    builder.build();
    manifest = JSON.parse(fs.readFileSync("/testimonial/manifest.json"), {
      encoding: "utf8"
    });
    expect(manifest).to.be.an("Array")["with"].length(4);
    expect(manifest[0]).to.have.property("id").that.equals("c");
    expect(manifest[0]).and.to.have.property("deps").that.deep.equals({});
    expect(manifest[1]).to.have.property("id").that.equals("b");
    expect(manifest[1]).to.have.property("deps").that.deep.equals({
      "./a/c": "c"
    });
    expect(manifest[2]).to.have.property("id").that.equals("d");
    expect(manifest[2]).and.to.have.property("deps").that.deep.equals({
      "a1/c": "c"
    });
    expect(manifest[3]).to.have.property("id").that.equals("e");
    return expect(manifest[3]).and.to.have.property("deps").that.deep.equals({
      "a1/../b": "b"
    });
  });
  return after(function() {
    mock.restore();
    return process.chdir(this.old_cwd);
  });
});
