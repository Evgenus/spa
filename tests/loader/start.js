// Generated by CoffeeScript 1.7.1
(function() {
  var app, connect, fs, http, mock, mount, path, route, spa, system, yaml;

  mock = require("mock-fs");

  fs = require("fs");

  path = require("path");

  yaml = require("js-yaml");

  connect = require("connect");

  http = require("http");

  route = require("connect-route");

  spa = require("../../lib");

  http.ServerResponse.prototype.redirect = function(target) {
    this.statusCode = 307;
    this.setHeader('Location', target);
    return this.end('Redirecting to ' + connect.utils.escape(target));
  };

  http.ServerResponse.prototype.fail = function() {
    this.session.state = "failed";
    this.statusCode = 307;
    this.setHeader('Location', "/");
    return this.end('Redirecting to ' + connect.utils.escape(target));
  };

  mount = function(target, name, dirname) {
    var child, result, stats, _i, _len, _ref;
    result = target[name] != null ? target[name] : target[name] = {};
    _ref = fs.readdirSync(dirname);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      if (name === ".") {
        continue;
      }
      if (name === "..") {
        continue;
      }
      child = path.join(dirname, name);
      stats = fs.statSync(child);
      if (stats.isDirectory()) {
        mount(result, name, child);
      }
      if (stats.isFile()) {
        result[name] = fs.readFileSync(child);
      }
    }
    return result;
  };

  app = connect().use(connect.logger()).use(connect.cookieParser()).use(connect.cookieSession({
    secret: 'spa:test!',
    cookie: {
      maxAge: 1000
    }
  })).use(route(function(router) {
    router.get('/', function(req, res, next) {
      var filename, phase, state, test, _base;
      if (req.session.state == null) {
        if ((_base = req.session).results == null) {
          _base.results = [];
        }
        req.session.state = "do_next";
        return res.redirect("/next");
      }
      state = req.session.state;
      test = req.session.test;
      phase = req.session.phase;
      console.log("\n## -- >> " + state + ":" + test + ":" + phase + "\n");
      switch (state) {
        case "do_before":
          req.session.state = "before_done";
          filename = path.join("/testimonial", test, "before.html");
          return fs.readFile(filename, function(error, data) {
            if (error != null) {
              throw error;
            }
            return res.end(data);
          });
        case "do_run":
        case "run_done":
          req.session.state = "run_done";
          filename = path.join("/testimonial", test, phase, "index.html");
          return fs.readFile(filename, function(error, data) {
            if (error != null) {
              throw error;
            }
            return res.end(data);
          });
        case "success":
          req.session.results.push("success:" + test + ":" + phase);
          req.session.state = "do_next";
          return res.redirect("/next");
        case "failed":
          req.session.results.push("failed:" + test + ":" + phase);
          req.session.state = "do_next";
          return res.redirect("/next");
        case "all_done":
          req.session.state = null;
          return res.end(JSON.stringify(req.session.results, null, "  "));
      }
    });
    router.get("/manifest.json", function(req, res, next) {
      var filename, phase, test;
      if (req.session.state !== "run_done") {
        return res.fail();
      }
      test = req.session.test;
      phase = req.session.phase;
      filename = path.join("/testimonial", test, phase, "manifest.json");
      return fs.readFile(filename, {
        encoding: "utf-8"
      }, function(error, data) {
        if (error != null) {
          throw error;
        }
        console.log("\nMANIFEST\n" + data + "\n");
        return res.end(data);
      });
    });
    router.get("/before", function(req, res, next) {
      if (req.session.state !== "before_done") {
        return res.fail();
      }
      req.session.state = "do_run";
      return res.redirect("/");
    });
    router.get("/next", function(req, res, next) {
      var phase, test;
      test = req.session.test;
      phase = req.session.phase;
      if (test == null) {
        req.session.state = "do_before";
        req.session.test = "test1";
        req.session.phase = "phase1";
      }
      switch (test) {
        case "test1":
          switch (phase) {
            case "phase1":
              req.session.state = "do_run";
              req.session.phase = "phase2";
              break;
            case "phase2":
              req.session.state = "all_done";
          }
      }
      return res.redirect("/");
    });
    router.get("/test1/phase1", function(req, res, next) {
      if (req.session.state !== "run_done") {
        return res.fail();
      }
      if (req.session.test !== "test1") {
        return res.fail();
      }
      if (req.session.phase !== "phase1") {
        return res.fail();
      }
      req.session.state = "success";
      return res.redirect("/");
    });
    router.get("/test1/phase2", function(req, res, next) {
      if (req.session.state !== "run_done") {
        return res.fail();
      }
      if (req.session.test !== "test1") {
        return res.fail();
      }
      if (req.session.phase !== "phase2") {
        return res.fail();
      }
      req.session.state = "success";
      return res.redirect("/");
    });
    return router.get("/favicon.ico", function(req, res, next) {
      res.statusCode = 404;
      return res.end();
    });
  })).use(connect["static"]("/testimonial", {
    redirect: false
  })).use(function(req, res, next) {
    return res.fail();
  });

  system = yaml.safeLoad("\ntestimonial: \n    test1:\n        before.html: |\n            <script>\n                window.onload = function() {\n                    localStorage.clear();\n                    location.replace(\"/before\");\n                    };\n            </script>\n        phase1:\n            a.js: |\n                var loader = require(\"loader\");\n                var phase = \"/test1/phase1\";\n                loader.onApplicationReady = function() {\n                    console.log(phase, \"onApplicationReady\");\n                    loader.checkUpdate();\n                };\n                loader.onUpdateFound = function() {\n                    // This time we run code of previously loaded phase1\n                    // at startup of phase2. How to check this WTF???\n                    console.log(phase, \"onUpdateFound\");\n                    loader.startUpdate();\n                };\n                loader.onUpToDate = function() {\n                    console.log(phase, \"onUpToDate\");\n                    location.replace(phase);\n                };\n                loader.onUpdateCompletted = function() {\n                    location.reload();\n                };\n            spa.yaml: |\n                root: \"./\"\n                manifest: \"./manifest.json\"\n                index: \"./index.html\"\n                assets:\n                    template: /assets/index.tmpl\n                    loader: /assets/loader.js\n                    md5: /assets/md5.js\n                    fake_app: /assets/fake-app.fjs\n                    fake_manifest: /assets/fake-manifest.json\n                hosting:\n                    \"/a.js\": \"/test1/phase1/a.js\"\n        phase2:\n            a.js: |\n                var loader = require(\"loader\");\n                var phase = \"/test1/phase2\";\n                loader.onApplicationReady = function() {\n                    console.log(phase, \"onApplicationReady\");\n                    loader.checkUpdate();\n                };\n                loader.onUpdateFound = function() {\n                    console.log(phase, \"onUpdateFound\", \"FAIL!!\");\n                };\n                loader.onUpToDate = function() {\n                    console.log(phase, \"onUpToDate\");\n                    location.replace(phase)\n                };\n                loader.onUpdateCompletted = function() {\n                    location.reload();\n                };\n            spa.yaml: |\n                root: \"./\"\n                manifest: \"./manifest.json\"\n                index: \"./index.html\"\n                assets:\n                    template: /assets/index.tmpl\n                    loader: /assets/loader.js\n                    md5: /assets/md5.js\n                    fake_app: /assets/fake-app.fjs\n                    fake_manifest: /assets/fake-manifest.json\n                hosting:\n                    \"/a.js\": \"/test1/phase2/a.js\"");

  mount(system, "assets", path.resolve(__dirname, "../../lib/assets"));

  process.chdir("/");

  mock(system);

  spa.Builder.from_config("/testimonial/test1/phase1/spa.yaml").build();

  spa.Builder.from_config("/testimonial/test1/phase2/spa.yaml").build();

  connect.createServer(app).listen(8010);

}).call(this);
